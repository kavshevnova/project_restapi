package random

import (
	"math/rand"
	"time"
)

const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"

func NewRandomString(length int) string {
	/*Инициализация генератора случайных чисел:
	math/rand по умолчанию использует детерминированный генератор (всегда одинаковую последовательность)
	rand.NewSource() создает новый источник случайных чисел
	time.Now().UnixNano() предоставляет "зерно" (seed) на основе текущего времени в наносекундах
	Зачем нужно seed на основе времени:
	Без seed генератор будет выдавать одни и те же значения при каждом запуске программы
	Текущее время в наносекундах - простой способ получить разное seed при каждом запуске
	Это делает строку действительно случайной для разных запусков программы */
	r := rand.New(rand.NewSource(time.Now().UnixNano()))
	b := make([]byte, length)
	for i := range b {
		/*len(charset): Возвращает длину строки charset (в вашем случае 62 символа: 26 строчных + 26 заглавных букв + 10 цифр)
		r.Intn(n): Генерирует случайное целое число в диапазоне [0, n). Например, для len(charset) = 62 вернёт число от 0 до 61 включительно
		charset[index]: Получает символ из строки charset по сгенерированному индексу
		В Go строки — это последовательности байт, поэтому мы можем обращаться к ним по индексу
		b[i] = ...:
		Присваивает полученный символ i-й позиции в байтовом слайсе b */
		b[i] = charset[r.Intn(len(charset))]
	}
return string(b)
}
