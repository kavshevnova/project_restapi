package random

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

//Этот код представляет собой unit-тест для функции NewRandomString, который проверяет два основных свойства:
//Генерируемая строка имеет правильную длину
//Последовательные вызовы с одинаковыми параметрами дают разные результаты

func TestNewRandomString(t *testing.T) {
	tests := []struct {
 name string
 size int
	}{
		// тест-кейсы с разными длинами строк
		//Каждый тест-кейс содержит:
		//name: описательное название теста
		//size: длина строки для генерации
		{
			name: "size = 1",
			size: 1,
		},
		{
		name: "size = 5",
		size: 5,
	},
	{
			name: "size = 10",
			size: 10,
	},
	{
			name: "size = 20",
			size: 20,
	},
	{
			name: "size = 30",
			size: 30,
	},
	}

	for _, tt := range tests {
		//t.Run() создает подтест для каждого кейса
		//Преимущества:
		//Изолированное выполнение каждого кейса
		//Четкое отображение, какой конкретно тест упал
t.Run(tt.name, func(t *testing.T) {
	//Генерация строк
	//Дважды вызывается NewRandomString() с одинаковым size
	//Ожидается, что это даст разные результаты
	str1 := NewRandomString(tt.size)
	str2 := NewRandomString(tt.size)
	//Проверка длины (assert.Len)
	//Убеждается, что длина строки точно соответствует запрошенной
	//Важно для случаев, когда функция может:
	//Возвращать строку не той длины
	//Обрезать/дополнять строку
	assert.Len(t, str1, tt.size)
	assert.Len(t, str2, tt.size)
	//Проверка уникальности (assert.NotEqual)
	//Критично для случайных генераторов
	//Гарантирует, что последовательные вызовы:
	//Не возвращают закешированный результат
	//Дают разные значения
	assert.NotEqual(t, str1, str2)
})
	}
}